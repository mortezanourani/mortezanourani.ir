@page "/Dashboard/Images/Delete"

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Image</h2>
    <hr />
    @if (image is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@image.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@image.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FileName</dt>
            <dd class="col-sm-10">@image.FileName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FileExtension</dt>
            <dd class="col-sm-10">@image.FileExtension</dd>
        </dl>
        <EditForm method="post" Model="image" OnValidSubmit="DeleteImage" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(image is null)">Delete</button> |
            <a href="/Dashboard/Albums/Details?id=@image!.Album.Id">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Image? image;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        image = await context.Images
            .Include(m => m.Album)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (image is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteImage()
    {
        using var context = DbFactory.CreateDbContext();
        context.Images.Remove(image!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/Dashboard/Albums/Details?id={image!.Album.Id}");
    }
}
