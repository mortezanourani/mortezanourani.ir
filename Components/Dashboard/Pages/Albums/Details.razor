@page "/Dashboard/Albums/Details"
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Album</h2>
    <hr />
    @if (album is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@album.Name</dd>
            <dd class="col-sm-10">@album.Images.Count()</dd>
        </dl>
        <div>
            <a href="@($"/Dashboard/Albums/Edit?id={album.Id}")">Edit</a> |
            <a href="@($"/Dashboard/Images/Create?album={album.Id}")">Add Image</a> |
            <a href="@($"/Dashboard/Albums")">Back to List</a>
        </div>

        <QuickGrid Class="table" Items="album.Images.AsQueryable()">
            <PropertyColumn Property="image => image.Name" />
            <PropertyColumn Property="image => image.Description" />
            <PropertyColumn Property="image => image.FileName" />
            <PropertyColumn Property="image => image.FileExtension" />

            <TemplateColumn Context="image">
                <a href="@($"/Dashboard/Images/Edit?id={image.Id}")">Edit</a> |
                <a href="@($"/Dashboard/Images/Details?id={image.Id}")">Details</a> |
                <a href="@($"/Dashboard/Images/Delete?id={image.Id}")">Delete</a>
            </TemplateColumn>
        </QuickGrid>

    }
</div>

@code {
    private Album? album;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        album = await context.Albums
            .Include(m => m.Images)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (album is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
